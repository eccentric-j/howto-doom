#+TITLE: How to Doom

[[file:images/hero.png]]

A guide to learning [[github:hlissner/doom-emacs][Doom Emacs]] documenting common questions and answers. This guide is based on repeating questions found in the Doom Emacs Discord server. For this to become more helpful please consider creating a pull-request. The current plan is to start out as lean, single document then organize it as it grows overtime.

If you find you're having trouble finding relevant questions, please create an issue to kickstart a reorganization effort.

* Table of Contents :TOC_3:
- [[#general][General]]
  - [[#how-do-i-learn-about-the-doom-api][How do I learn about the DOOM api?]]
  - [[#how-do-i-install-a-package-from-melpa][How do I install a package from MELPA?]]
  - [[#how-do-i-customize-a-package-or-module][How do I customize a package or module?]]
  - [[#whats-the-difference-between-use-package-and-after][What's the difference between =use-package!= and =after!=?]]
- [[#key-bindings][Key Bindings]]
  - [[#how-do-i-find-a-key-mapping][How do I find a key mapping?]]
  - [[#how-do-i-replace-a-key-mapping-if-i-dont-know-the-key][How do I replace a key mapping if I don't know the key?]]
  - [[#how-do-i-set-a-key-mapping-for-a-specific-evil-mode][How do I set a key mapping for a specific evil mode?]]
  - [[#how-do-i-set-a-key-mapping-for-a-mode-based-key-map][How do I set a key mapping for a mode-based key map?]]
  - [[#how-do-i-remove-a-key-mapping-from-a-mode-based-key-map][How do I remove a key mapping from a mode-based key map?]]
- [[#ui][UI]]
  - [[#how-do-i-disable-pretty-code-symbols][How do I disable pretty code symbols?]]
  - [[#how-do-i-make-emacs-fullscreen-on-startup][How do I make emacs fullscreen on startup?]]
- [[#language-server-protocol-lsp][Language Server Protocol (LSP)]]
  - [[#how-do-i-add-language-server-protocol-support][How do I add language server protocol support?]]
- [[#workspaces][Workspaces]]
  - [[#how-do-you-close-all-open-buffers-in-a-workspace][How do you close all open buffers in a workspace?]]
  - [[#how-do-you-kill-buried-buffers][How do you kill buried buffers?]]
- [[#modes][Modes]]
  - [[#evil-mode][Evil Mode]]
    - [[#how-do-i-learn-evil-mode-bindings][How do I learn evil mode bindings?]]
  - [[#js2-mode][js2-mode]]
    - [[#how-do-i-get-abbreviations-tide-or-other-completions-to-company][How do I get abbreviations, tide, or other completions to company?]]
  - [[#org-mode][org-mode]]
    - [[#how-do-i-bind-a-key-for-only-org-and-related-modes][How do I bind a key for only org and related modes?]]

* General
** How do I learn about the DOOM api?
- Read the source. Elisp is a concise, expressive language and will be tell you exactly how a command or function exists.
- Use the help tools in emacs to view functions, vars, keybindings, modes, and much more.
- For instance in normal mode press =SPC h f=, type =use-package\!=, then press =ENTER=. The help guide will show docs, mappings, references, and source.
** How do I install a package from MELPA?
Edit your =~/.doom.d/packages.el= and add a line like the following:
#+BEGIN_SRC emacs-lisp
(package! evil-lisp-state)
#+END_SRC
Where you can replace evil-lisp-state with the MELPA package name.
** How do I customize a package or module?
Edit your =~/.doom.d/config.el=. There are many options, but there are two very common formats:
#+BEGIN_SRC emacs-lisp
(use-package! evil-lisp-state
  :init
  (setq evil-lisp-state-global t)
  :config
  (map! :map evil-lisp-state-map
        ";" (evil-lisp-state-enter-command wrap-comment)))
#+END_SRC
- Make sure you use the package name and not the mode name
- Be sure to read through the excellent [[github:hlissner/doom-emacs/blob/develop/docs/api.org][Doom Emacs API docs]] for more options including =after!= and =add-hook!=.
- Alternatively using =after!=:
#+BEGIN_SRC emacs-lisp
(after! highlight-indent-guides
  (setq
    highlight-indent-guides-auto-enabled         nil
    highlight-indent-guides-responsive           'top
    highlight-indent-guides-delay                0
    highlight-indent-guides-highlighter-function 'j/active-guide)
  (custom-set-faces!
    '(highlight-indent-guides-top-character-face
       :foreground "#DE5356")))
#+END_SRC
** What's the difference between =use-package!= and =after!=?
- =use-package!= can use =:init= to run code before the package is loaded and =:config= to run code after the package is loaded.
- =use-package!= has many more keywords to manage packages such as =:hook=, =:after=, =:bind=, =:defer=, and =:commands=.
- Press =SPC h f= type =use-package= to learn more.
- =after!= is exclusively for running code when one or more packages were loaded.

* Key Bindings
** How do I find a key mapping?
- In normal mode press =SPC h k= then press the keystroke to trigger view the command bound to the keymap.
- If in any other mode press =M-x= then type =describe-key=
** How do I replace a key mapping if I don't know the key?
- Use a vector prefixed with =remap=
#+BEGIN_SRC emacs-lisp
(map! [remap +workspace/new] #'my-workspace-new)
#+END_SRC
** How do I set a key mapping for a specific evil mode?
- Normal, insert, visual, operator, and other evil mode bindings can be set by including a prefix with keys like =:nivo=
#+BEGIN_SRC emacs-lisp
(map! :after evil
      :nv "p" #'hydra-paste/evil-paste-after
      :nv "P" #'hydra-paste/evil-paste-before)
#+END_SRC
** How do I set a key mapping for a mode-based key map?
- Specify =:map= and provide a reference to a keymap such as evil-org-mode-map
#+BEGIN_SRC emacs-lisp
(map! :after vterm
      :map vterm-mode-map
      "C-c <escape>" #'vterm-exit
      "C-c q"        #'vterm-quit
      "C-c x"        #'vterm-send-C-x
      "C-c C-d"      #'vterm-send-C-d
      "C-c :"        #'vterm-send-colon
      "C-h"          #'vterm-send-C-h
      "C-u"          #'vterm-send-C-u
      "C-^"          (cmd!! #'vterm-send-key "^" t nil t))
#+END_SRC
** How do I remove a key mapping from a mode-based key map?
- Use nil in place of a command symbol reference to unbind from a mode-map
#+BEGIN_SRC emacs-lisp
(map! :after lispy
      :map lispy-mode-map-lispy
      "[" nil
      "]" nil)
#+END_SRC
* UI
** How do I disable pretty code symbols?
- Open =~/.doom.d/config.el= and add code similar to the following
#+BEGIN_SRC emacs-lisp
(setq +pretty-code-symbols nil)
;; or ;;
(setq +pretty-code-enabled-modes nil)
#+END_SRC
(thanks to @henrik on doom discord)
** How do I make emacs fullscreen on startup?
- Place one of the following snippets in your =~/.doom.d/config.el= or if using Emacs 27+ your =early-init.el=
#+BEGIN_SRC emacs-lisp
(add-hook 'window-setup-hook #'toggle-frame-fullscreen)
;; or ;;
(add-to-list 'initial-frame-alist '(fullscreen . fullboth))
#+END_SRC
(credit goes to @henrik from doom discord)
* Language Server Protocol (LSP)
** How do I add language server protocol support?
- Open =~/.doom.d/init.el= and uncomment the lsp module
- For each language you would like to use lsp with, add +lsp flag to their respective module in =~/.doom.d/init.el=
- =python= -> =(python +lsp)=
- Install the language server for your target language. See [[https://emacs-lsp.github.io/lsp-mode/page/languages/][emacs-lsp]] docs for detailed instructions.
- See the official [[https://github.com/hlissner/doom-emacs/tree/develop/modules/tools/lsp][Doom LSP module docs]] for configuration options
* Workspaces
** How do you close all open buffers in a workspace?
=SPC q F= (doom/kill-all-buffers)
** How do you kill buried buffers?
=SPC b Z=
* Modes
** Evil Mode
*** How do I learn evil mode bindings?
- Many tutorials, videos, interactive games exist
- One method that runs from within emacs is a ported vimtutor package
- https://github.com/syl20bnr/evil-tutor
  (credit goes to @FDietyLink from doom discord)
** js2-mode
*** How do I get abbreviations, tide, or other completions to company?
- Open up your =~/.doom.d/config.el= and add a snippet like the following
#+BEGIN_SRC emacs-lisp
(after! tide
 (set-company-backend! 'tide-mode '(company-tide company-dabbrev)))
#+END_SRC
(credit goes to @kleisi from doom discord)
** org-mode
*** How do I bind a key for only org and related modes?
- Open up your =~/.doom.d/config.el= and add a snippet like the following
#+BEGIN_SRC emacs-lisp
(map! :after evil-org
      :map evil-org-mode-map
      :i "C-k" 'evil-insert-digraph)
#+END_SRC
(credit goes to @henrik from doom discord)
